name: Notify Discord on Release

on:
  release:
    types: [published] # Triggers on published releases
  push:
    tags:
      - "v*.*.*" # Triggers on version tags for testing
    branches:
      - "test-discord-notifications" # Also trigger on test branch for debugging

jobs:
  notify-discord:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Event Information
        run: |
          echo "üéØ Event Name: ${{ github.event_name }}"
          echo "üìù Ref: ${{ github.ref }}"
          echo "üè∑Ô∏è Ref Name: ${{ github.ref_name }}"
          echo "üîó Repository: ${{ github.repository }}"
          echo "üë§ Actor: ${{ github.actor }}"
          echo "üìÖ SHA: ${{ github.sha }}"
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "üì¶ Release Name: ${{ github.event.release.name }}"
            echo "üè∑Ô∏è Release Tag: ${{ github.event.release.tag_name }}"
            echo "üìù Release Body Length: $(echo '${{ github.event.release.body }}' | wc -c) chars"
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release info
        id: release_info
        run: |
          echo "üîç Processing event: ${{ github.event_name }}"

          if [ "${{ github.event_name }}" = "release" ]; then
            echo "üì¶ Processing GitHub release event"
            TITLE="${{ github.event.release.name }}"
            BODY="${{ github.event.release.body }}"
            URL="${{ github.event.release.html_url }}"
            TAG="${{ github.event.release.tag_name }}"
          else
            echo "üè∑Ô∏è Processing tag push event"
            TITLE="Release ${{ github.ref_name }}"
            BODY="New version ${{ github.ref_name }} has been tagged.\n\nSee CHANGELOG.md for detailed release notes."
            URL="https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
            TAG="${{ github.ref_name }}"
          fi

          echo "üìù Title: $TITLE"
          echo "üè∑Ô∏è Tag: $TAG"
          echo "üìè Body Length: $(echo '$BODY' | wc -c) chars"
          echo "üîó URL: $URL"

          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Extract changelog for version
        id: changelog_info
        run: |
          echo "üìã Extracting changelog information for version $TAG"

          # Extract changelog section for this version
          CHANGELOG_CONTENT=""
          if [ -f "CHANGELOG.md" ]; then
            # Find the section for this version in CHANGELOG.md
            # Look for pattern like "## [1.0.3] - 2025-10-26" or "## [1.0.3]"
            VERSION_PATTERN="## \\[$TAG\\]"
            if grep -q "$VERSION_PATTERN" CHANGELOG.md; then
              echo "‚úÖ Found changelog section for version $TAG"
              # Extract everything from this version header until the next version header or end
              CHANGELOG_CONTENT=$(awk "/$VERSION_PATTERN/,/^## \\[.*\\]/{if(/^## \\[.*\\]/{if(found){exit}else{found=1;next}} if(found) print}" CHANGELOG.md | sed '/^$/d' | head -20)
              if [ -z "$CHANGELOG_CONTENT" ]; then
                CHANGELOG_CONTENT=$(awk "/$VERSION_PATTERN/{found=1; next} /^## \\[/{if(found) exit} found && !/^$/{print}" CHANGELOG.md | head -20)
              fi
            else
              echo "‚ö†Ô∏è No changelog section found for version $TAG"
              CHANGELOG_CONTENT="No changelog entries found for this version."
            fi
          else
            echo "‚ö†Ô∏è CHANGELOG.md file not found"
            CHANGELOG_CONTENT="Changelog file not available."
          fi

          echo "üìù Changelog content length: $(echo "$CHANGELOG_CONTENT" | wc -c) chars"
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get commit messages since last tag
        id: commit_info
        run: |
          echo "üîÑ Getting commit messages for version $TAG"

          # Get the previous tag to compare against
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$PREV_TAG" ]; then
            echo "üìä Comparing $PREV_TAG..$TAG"
            # Get commit messages between tags
            COMMITS=$(git log --oneline --pretty=format:"- %s" $PREV_TAG..$TAG 2>/dev/null | head -10)
            if [ -z "$COMMITS" ]; then
              COMMITS=$(git log --oneline --pretty=format:"- %s" -10 2>/dev/null)
            fi
          else
            echo "üìä Getting recent commits (no previous tag found)"
            # If no previous tag, get last 10 commits
            COMMITS=$(git log --oneline --pretty=format:"- %s" -10 2>/dev/null)
          fi

          if [ -z "$COMMITS" ]; then
            COMMITS="No recent commits found."
          fi

          echo "üìù Commit messages:"
          echo "$COMMITS"
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate Discord Webhook Secret
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            echo "‚ùå ERROR: DISCORD_WEBHOOK_URL secret is not set!"
            exit 1
          else
            echo "‚úÖ Discord webhook secret is configured"
            # Mask the URL for security but show it's set
            WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
            echo "üîó Webhook URL length: ${#WEBHOOK_URL} characters"
            if [[ $WEBHOOK_URL == https://discord.com/api/webhooks/* ]]; then
              echo "‚úÖ Webhook URL format appears valid"
            else
              echo "‚ö†Ô∏è WARNING: Webhook URL format may be incorrect"
            fi
          fi

      - name: Prepare Discord payload
        id: prepare_payload
        run: |
          echo "üî® Preparing Discord payload..."

          # Escape JSON strings properly
          TITLE_ESCAPED=$(echo "${{ steps.release_info.outputs.title }}" | sed 's/"/\\"/g')
          BODY_ESCAPED=$(echo "${{ steps.release_info.outputs.body }}" | sed 's/"/\\"/g' | sed 's/$/\\n/g' | tr -d '\n')
          URL_ESCAPED="${{ steps.release_info.outputs.url }}"
          TAG_ESCAPED="${{ steps.release_info.outputs.tag }}"

          # Escape changelog and commit information
          CHANGELOG_ESCAPED=$(echo "${{ steps.changelog_info.outputs.changelog }}" | sed 's/"/\\"/g' | sed 's/$/\\n/g' | tr -d '\n' | head -c 500)
          COMMITS_ESCAPED=$(echo "${{ steps.commit_info.outputs.commits }}" | sed 's/"/\\"/g' | sed 's/$/\\n/g' | tr -d '\n' | head -c 500)

          PAYLOAD=$(cat <<EOF
          {
            "content": "üöÄ **New NextCraftTalk Release Available!**",
            "embeds": [{
              "title": "$TITLE_ESCAPED",
              "description": "$BODY_ESCAPED",
              "url": "$URL_ESCAPED",
              "color": 65280,
              "fields": [
                {
                  "name": "Version",
                  "value": "$TAG_ESCAPED",
                  "inline": true
                },
                {
                  "name": "Repository",
                  "value": "[${{ github.repository }}](https://github.com/${{ github.repository }})",
                  "inline": true
                },
                {
                  "name": "Branch",
                  "value": "${{ github.ref_name }}",
                  "inline": true
                },
                {
                  "name": "üìã Changelog",
                  "value": "$CHANGELOG_ESCAPED",
                  "inline": false
                },
                {
                  "name": "üîÑ Recent Commits",
                  "value": "$COMMITS_ESCAPED",
                  "inline": false
                }
              ],
              "footer": {
                "text": "NextCraftTalk ‚Ä¢ Released on $(date -u +'%Y-%m-%d %H:%M UTC') ‚Ä¢ Event: ${{ github.event_name }}"
              },
              "thumbnail": {
                "url": "https://raw.githubusercontent.com/Wicz-Cloud/NextCraftTalk/main/docs/assets/logo.png"
              }
            }]
          }
          EOF
          )

          echo "üì¶ Payload prepared successfully"
          echo "üìè Payload size: $(echo "$PAYLOAD" | wc -c) characters"

          # Save payload for next step
          echo "$PAYLOAD" > /tmp/discord_payload.json
          echo "üíæ Payload saved to /tmp/discord_payload.json"

      - name: Send Discord notification
        run: |
          echo "üì§ Sending Discord notification..."

          # Load the payload
          PAYLOAD=$(cat /tmp/discord_payload.json)

          echo "üîç Payload preview (first 500 chars):"
          echo "$PAYLOAD" | head -c 500
          echo "..."

          # Send to Discord webhook with verbose output
          echo "üåê Making HTTP request to Discord webhook..."
          RESPONSE=$(curl -v -H "Content-Type: application/json" \
               -d "$PAYLOAD" \
               ${{ secrets.DISCORD_WEBHOOK_URL }} 2>&1)

          # Check response
          if echo "$RESPONSE" | grep -q "< HTTP/2 204\|204 No Content\|200 OK"; then
            echo "‚úÖ Discord notification sent successfully!"
          else
            echo "‚ùå Failed to send Discord notification"
            echo "üîç Response details:"
            echo "$RESPONSE"
            exit 1
          fi
